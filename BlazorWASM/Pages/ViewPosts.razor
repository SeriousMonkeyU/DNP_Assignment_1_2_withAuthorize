@page "/ViewPosts"
@using global::Shared.Models
@using HttpClient.ClientInterfaces
@inject IPostService postService
@inject NavigationManager NavMgr;
<h3>Posts</h3>

<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
            <div class="filter">
                <label>Is completed?</label>
                <select @bind="completedStatusFilter">
                    <option value="all">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadPosts">Load</button>
</div>



@code {
    private IEnumerable<Post> posts;
    private string msg = "";
    private bool doShowFilters = false;
    
    private string? usernameFilter;
    private int? userIdFilter;
    private string? titleContainsFilter;
    private string? completedStatusFilter;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            //LoadPosts()
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            bool? completedFilterValue = null;
            if (!string.IsNullOrEmpty(completedStatusFilter) && !completedStatusFilter.Equals("all"))
            {
                completedFilterValue = bool.Parse(completedStatusFilter);
            }
            posts = await postService.GetAsync(usernameFilter,userIdFilter,titleContainsFilter, completedFilterValue);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void ViewPost(int id)
    {
        string parameter = id.ToString();
        NavMgr.NavigateTo($"/ViewPost/{parameter}");
    }
    
}

@if (posts == null)
{
    
}
else if (!posts.Any())
{
    <p>No Posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Post ID</th>
            <th>Owner ID</th>
            <th>Title</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr @onclick="()=>ViewPost(item.Id)">
                <td>@item.Id</td>
                <td>@item.Owner.UserName</td>
                <td>@item.Title</td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}